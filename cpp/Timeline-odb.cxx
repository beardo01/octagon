// This file was generated by ODB, object-relational mapping (ORM)
// compiler for C++.
//

#include <odb/pre.hxx>

#include "Timeline-odb.hxx"

#include <cassert>
#include <cstring>  // std::memcpy


#include <odb/pgsql/traits.hxx>
#include <odb/pgsql/database.hxx>
#include <odb/pgsql/transaction.hxx>
#include <odb/pgsql/connection.hxx>
#include <odb/pgsql/statement.hxx>
#include <odb/pgsql/statement-cache.hxx>
#include <odb/pgsql/simple-object-statements.hxx>
#include <odb/pgsql/container-statements.hxx>
#include <odb/pgsql/exceptions.hxx>
#include <odb/pgsql/simple-object-result.hxx>

namespace odb
{
  // Timeline
  //

  const char access::object_traits_impl< ::Timeline, id_pgsql >::
  persist_statement_name[] = "persist_timeline";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::
  find_statement_name[] = "find_timeline";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::
  update_statement_name[] = "update_timeline";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::
  erase_statement_name[] = "erase_timeline";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::
  query_statement_name[] = "query_timeline";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::
  erase_query_statement_name[] = "erase_query_timeline";

  const unsigned int access::object_traits_impl< ::Timeline, id_pgsql >::
  persist_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid
  };

  const unsigned int access::object_traits_impl< ::Timeline, id_pgsql >::
  find_statement_types[] =
  {
    pgsql::int8_oid
  };

  const unsigned int access::object_traits_impl< ::Timeline, id_pgsql >::
  update_statement_types[] =
  {
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::text_oid,
    pgsql::int8_oid
  };

  struct access::object_traits_impl< ::Timeline, id_pgsql >::extra_statement_cache_type
  {
    pgsql::container_statements_impl< timeline_items_traits > timeline_items_;

    extra_statement_cache_type (
      pgsql::connection& c,
      image_type&,
      id_image_type&,
      pgsql::binding& id,
      pgsql::binding&,
      pgsql::native_binding& idn,
      const unsigned int* idt)
    : timeline_items_ (c, id, idn, idt)
    {
    }
  };

  // timeline_items_
  //

  const char access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  select_name[] = "select_timeline_timeline_items";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  insert_name[] = "insert_timeline_timeline_items";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  delete_name[] = "delete_timeline_timeline_items";

  const unsigned int access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  insert_types[] =
  {
    pgsql::int8_oid,
    pgsql::int8_oid,
    pgsql::int8_oid
  };

  const char access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  select_statement[] =
  "SELECT "
  "\"timeline_timeline_items\".\"index\", "
  "\"timeline_timeline_items\".\"value\" "
  "FROM \"timeline_timeline_items\" "
  "WHERE \"timeline_timeline_items\".\"object_id\"=$1 ORDER BY \"timeline_timeline_items\".\"index\"";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  insert_statement[] =
  "INSERT INTO \"timeline_timeline_items\" "
  "(\"object_id\", "
  "\"index\", "
  "\"value\") "
  "VALUES "
  "($1, $2, $3)";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  delete_statement[] =
  "DELETE FROM \"timeline_timeline_items\" "
  "WHERE \"object_id\"=$1";

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  bind (pgsql::bind* b,
        const pgsql::bind* id,
        std::size_t id_size,
        data_image_type& d)
  {
    using namespace pgsql;

    statement_kind sk (statement_select);
    ODB_POTENTIALLY_UNUSED (sk);

    size_t n (0);

    // object_id
    //
    if (id != 0)
      std::memcpy (&b[n], id, id_size * sizeof (id[0]));
    n += id_size;

    // index
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.index_value;
    b[n].is_null = &d.index_null;
    n++;

    // value
    //
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &d.value_value;
    b[n].is_null = &d.value_null;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  grow (data_image_type& i,
        bool* t)
  {
    bool grew (false);

    // index
    //
    t[0UL] = 0;

    // value
    //
    t[1UL] = 0;

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  init (data_image_type& i,
        index_type* j,
        const value_type& v)
  {
    using namespace pgsql;

    statement_kind sk (statement_insert);
    ODB_POTENTIALLY_UNUSED (sk);

    bool grew (false);

    // index
    //
    if (j != 0)
    {
      bool is_null (false);
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_image (
        i.index_value, is_null, *j);
      i.index_null = is_null;
    }

    // value
    //
    {
      typedef object_traits< ::TimelineItem > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      bool is_null (ptr_traits::null_ptr (v));
      if (!is_null)
      {
        const obj_traits::id_type& id (
          obj_traits::id (ptr_traits::get_ref (v)));

        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_image (
          i.value_value, is_null, id);
        i.value_null = is_null;
      }
      else
        i.value_null = true;
    }

    if (grew)
      i.version++;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  init (index_type& j,
        value_type& v,
        const data_image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (db);

    // index
    //
    {
      pgsql::value_traits<
          index_type,
          pgsql::id_bigint >::set_value (
        j,
        i.index_value,
        i.index_null);
    }

    // value
    //
    {
      typedef object_traits< ::TimelineItem > obj_traits;
      typedef odb::pointer_traits< value_type > ptr_traits;

      if (i.value_null)
        v = ptr_traits::pointer_type ();
      else
      {
        obj_traits::id_type id;
        pgsql::value_traits<
            obj_traits::id_type,
            pgsql::id_bigint >::set_value (
          id,
          i.value_value,
          i.value_null);

        // If a compiler error points to the line below, then
        // it most likely means that a pointer used in a member
        // cannot be initialized from an object pointer.
        //
        v = ptr_traits::pointer_type (
          static_cast<pgsql::database*> (db)->load<
            obj_traits::object_type > (id));
      }
    }
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  insert (index_type i, const value_type& v, void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (di, &i, v);

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    if (!sts.insert_statement ().execute ())
      throw object_already_persistent ();
  }

  bool access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  select (index_type& i, value_type& v, void* d)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    statements_type& sts (*static_cast< statements_type* > (d));
    data_image_type& di (sts.data_image ());

    init (i, v, di, &sts.connection ().database ());

    if (sts.data_binding_test_version ())
    {
      const binding& id (sts.id_binding ());
      bind (sts.data_bind (), id.bind, id.count, di);
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    select_statement::result r (st.fetch ());
    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  delete_ (void* d)
  {
    using namespace pgsql;

    statements_type& sts (*static_cast< statements_type* > (d));
    sts.delete_statement ().execute ();
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  persist (const container_type& c,
           statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::persist (c, fs);
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  load (container_type& c,
        statements_type& sts)
  {
    using namespace pgsql;
    using pgsql::select_statement;

    const binding& id (sts.id_binding ());

    if (sts.data_binding_test_version ())
    {
      bind (sts.data_bind (), id.bind, id.count, sts.data_image ());
      sts.data_binding_update_version ();
    }

    select_statement& st (sts.select_statement ());
    st.execute ();
    auto_result ar (st);
    st.cache ();
    select_statement::result r (st.fetch ());
    bool more (r != select_statement::no_data);

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::load (c, more, fs);
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  update (const container_type& c,
          statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::update (c, fs);
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::timeline_items_traits::
  erase (statements_type& sts)
  {
    using namespace pgsql;

    functions_type& fs (sts.functions ());
    fs.ordered_ = true;
    container_traits_type::erase (fs);
  }

  access::object_traits_impl< ::Timeline, id_pgsql >::id_type
  access::object_traits_impl< ::Timeline, id_pgsql >::
  id (const id_image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  access::object_traits_impl< ::Timeline, id_pgsql >::id_type
  access::object_traits_impl< ::Timeline, id_pgsql >::
  id (const image_type& i)
  {
    pgsql::database* db (0);
    ODB_POTENTIALLY_UNUSED (db);

    id_type id;
    {
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        id,
        i.id_value,
        i.id_null);
    }

    return id;
  }

  bool access::object_traits_impl< ::Timeline, id_pgsql >::
  grow (image_type& i,
        bool* t)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (t);

    bool grew (false);

    // id_
    //
    t[0UL] = 0;

    // colour_one_
    //
    if (t[1UL])
    {
      i.colour_one_value.capacity (i.colour_one_size);
      grew = true;
    }

    // colour_two_
    //
    if (t[2UL])
    {
      i.colour_two_value.capacity (i.colour_two_size);
      grew = true;
    }

    // colour_three_
    //
    if (t[3UL])
    {
      i.colour_three_value.capacity (i.colour_three_size);
      grew = true;
    }

    // label_one_
    //
    if (t[4UL])
    {
      i.label_one_value.capacity (i.label_one_size);
      grew = true;
    }

    // label_two_
    //
    if (t[5UL])
    {
      i.label_two_value.capacity (i.label_two_size);
      grew = true;
    }

    // label_three_
    //
    if (t[6UL])
    {
      i.label_three_value.capacity (i.label_three_size);
      grew = true;
    }

    return grew;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  bind (pgsql::bind* b,
        image_type& i,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    std::size_t n (0);

    // id_
    //
    if (sk != statement_insert && sk != statement_update)
    {
      b[n].type = pgsql::bind::bigint;
      b[n].buffer = &i.id_value;
      b[n].is_null = &i.id_null;
      n++;
    }

    // colour_one_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.colour_one_value.data ();
    b[n].capacity = i.colour_one_value.capacity ();
    b[n].size = &i.colour_one_size;
    b[n].is_null = &i.colour_one_null;
    n++;

    // colour_two_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.colour_two_value.data ();
    b[n].capacity = i.colour_two_value.capacity ();
    b[n].size = &i.colour_two_size;
    b[n].is_null = &i.colour_two_null;
    n++;

    // colour_three_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.colour_three_value.data ();
    b[n].capacity = i.colour_three_value.capacity ();
    b[n].size = &i.colour_three_size;
    b[n].is_null = &i.colour_three_null;
    n++;

    // label_one_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.label_one_value.data ();
    b[n].capacity = i.label_one_value.capacity ();
    b[n].size = &i.label_one_size;
    b[n].is_null = &i.label_one_null;
    n++;

    // label_two_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.label_two_value.data ();
    b[n].capacity = i.label_two_value.capacity ();
    b[n].size = &i.label_two_size;
    b[n].is_null = &i.label_two_null;
    n++;

    // label_three_
    //
    b[n].type = pgsql::bind::text;
    b[n].buffer = i.label_three_value.data ();
    b[n].capacity = i.label_three_value.capacity ();
    b[n].size = &i.label_three_size;
    b[n].is_null = &i.label_three_null;
    n++;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  bind (pgsql::bind* b, id_image_type& i)
  {
    std::size_t n (0);
    b[n].type = pgsql::bind::bigint;
    b[n].buffer = &i.id_value;
    b[n].is_null = &i.id_null;
  }

  bool access::object_traits_impl< ::Timeline, id_pgsql >::
  init (image_type& i,
        const object_type& o,
        pgsql::statement_kind sk)
  {
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (sk);

    using namespace pgsql;

    bool grew (false);

    // colour_one_
    //
    {
      ::std::string const& v =
        o.colour_one_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.colour_one_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.colour_one_value,
        size,
        is_null,
        v);
      i.colour_one_null = is_null;
      i.colour_one_size = size;
      grew = grew || (cap != i.colour_one_value.capacity ());
    }

    // colour_two_
    //
    {
      ::std::string const& v =
        o.colour_two_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.colour_two_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.colour_two_value,
        size,
        is_null,
        v);
      i.colour_two_null = is_null;
      i.colour_two_size = size;
      grew = grew || (cap != i.colour_two_value.capacity ());
    }

    // colour_three_
    //
    {
      ::std::string const& v =
        o.colour_three_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.colour_three_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.colour_three_value,
        size,
        is_null,
        v);
      i.colour_three_null = is_null;
      i.colour_three_size = size;
      grew = grew || (cap != i.colour_three_value.capacity ());
    }

    // label_one_
    //
    {
      ::std::string const& v =
        o.label_one_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.label_one_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.label_one_value,
        size,
        is_null,
        v);
      i.label_one_null = is_null;
      i.label_one_size = size;
      grew = grew || (cap != i.label_one_value.capacity ());
    }

    // label_two_
    //
    {
      ::std::string const& v =
        o.label_two_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.label_two_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.label_two_value,
        size,
        is_null,
        v);
      i.label_two_null = is_null;
      i.label_two_size = size;
      grew = grew || (cap != i.label_two_value.capacity ());
    }

    // label_three_
    //
    {
      ::std::string const& v =
        o.label_three_;

      bool is_null (false);
      std::size_t size (0);
      std::size_t cap (i.label_three_value.capacity ());
      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_image (
        i.label_three_value,
        size,
        is_null,
        v);
      i.label_three_null = is_null;
      i.label_three_size = size;
      grew = grew || (cap != i.label_three_value.capacity ());
    }

    return grew;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  init (object_type& o,
        const image_type& i,
        database* db)
  {
    ODB_POTENTIALLY_UNUSED (o);
    ODB_POTENTIALLY_UNUSED (i);
    ODB_POTENTIALLY_UNUSED (db);

    // id_
    //
    {
      long unsigned int& v =
        o.id_;

      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_value (
        v,
        i.id_value,
        i.id_null);
    }

    // colour_one_
    //
    {
      ::std::string& v =
        o.colour_one_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.colour_one_value,
        i.colour_one_size,
        i.colour_one_null);
    }

    // colour_two_
    //
    {
      ::std::string& v =
        o.colour_two_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.colour_two_value,
        i.colour_two_size,
        i.colour_two_null);
    }

    // colour_three_
    //
    {
      ::std::string& v =
        o.colour_three_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.colour_three_value,
        i.colour_three_size,
        i.colour_three_null);
    }

    // label_one_
    //
    {
      ::std::string& v =
        o.label_one_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.label_one_value,
        i.label_one_size,
        i.label_one_null);
    }

    // label_two_
    //
    {
      ::std::string& v =
        o.label_two_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.label_two_value,
        i.label_two_size,
        i.label_two_null);
    }

    // label_three_
    //
    {
      ::std::string& v =
        o.label_three_;

      pgsql::value_traits<
          ::std::string,
          pgsql::id_string >::set_value (
        v,
        i.label_three_value,
        i.label_three_size,
        i.label_three_null);
    }
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  init (id_image_type& i, const id_type& id)
  {
    {
      bool is_null (false);
      pgsql::value_traits<
          long unsigned int,
          pgsql::id_bigint >::set_image (
        i.id_value, is_null, id);
      i.id_null = is_null;
    }
  }

  const char access::object_traits_impl< ::Timeline, id_pgsql >::persist_statement[] =
  "INSERT INTO \"timeline\" "
  "(\"id\", "
  "\"colour_one\", "
  "\"colour_two\", "
  "\"colour_three\", "
  "\"label_one\", "
  "\"label_two\", "
  "\"label_three\") "
  "VALUES "
  "(DEFAULT, $1, $2, $3, $4, $5, $6) "
  "RETURNING \"id\"";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::find_statement[] =
  "SELECT "
  "\"timeline\".\"id\", "
  "\"timeline\".\"colour_one\", "
  "\"timeline\".\"colour_two\", "
  "\"timeline\".\"colour_three\", "
  "\"timeline\".\"label_one\", "
  "\"timeline\".\"label_two\", "
  "\"timeline\".\"label_three\" "
  "FROM \"timeline\" "
  "WHERE \"timeline\".\"id\"=$1";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::update_statement[] =
  "UPDATE \"timeline\" "
  "SET "
  "\"colour_one\"=$1, "
  "\"colour_two\"=$2, "
  "\"colour_three\"=$3, "
  "\"label_one\"=$4, "
  "\"label_two\"=$5, "
  "\"label_three\"=$6 "
  "WHERE \"id\"=$7";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::erase_statement[] =
  "DELETE FROM \"timeline\" "
  "WHERE \"id\"=$1";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::query_statement[] =
  "SELECT "
  "\"timeline\".\"id\", "
  "\"timeline\".\"colour_one\", "
  "\"timeline\".\"colour_two\", "
  "\"timeline\".\"colour_three\", "
  "\"timeline\".\"label_one\", "
  "\"timeline\".\"label_two\", "
  "\"timeline\".\"label_three\" "
  "FROM \"timeline\"";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::erase_query_statement[] =
  "DELETE FROM \"timeline\"";

  const char access::object_traits_impl< ::Timeline, id_pgsql >::table_name[] =
  "\"timeline\"";

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  persist (database& db, object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::pre_persist);

    image_type& im (sts.image ());
    binding& imb (sts.insert_image_binding ());

    if (init (im, obj, statement_insert))
      im.version++;

    if (im.version != sts.insert_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_insert);
      sts.insert_image_version (im.version);
      imb.version++;
    }

    {
      id_image_type& i (sts.id_image ());
      binding& b (sts.id_image_binding ());
      if (i.version != sts.id_image_version () || b.version == 0)
      {
        bind (b.bind, i);
        sts.id_image_version (i.version);
        b.version++;
      }
    }

    insert_statement& st (sts.persist_statement ());
    if (!st.execute ())
      throw object_already_persistent ();

    obj.id_ = id (sts.id_image ());

    id_image_type& i (sts.id_image ());
    init (i, obj.id_);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // timeline_items_
    //
    {
      ::std::vector< ::std::shared_ptr< ::TimelineItem > > const& v =
        obj.timeline_items_;

      timeline_items_traits::persist (
        v,
        esc.timeline_items_);
    }

    callback (db,
              static_cast<const object_type&> (obj),
              callback_event::post_persist);
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  update (database& db, const object_type& obj)
  {
    ODB_POTENTIALLY_UNUSED (db);

    using namespace pgsql;
    using pgsql::update_statement;

    callback (db, obj, callback_event::pre_update);

    pgsql::transaction& tr (pgsql::transaction::current ());
    pgsql::connection& conn (tr.connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    const id_type& id (
      obj.id_);
    id_image_type& idi (sts.id_image ());
    init (idi, id);

    image_type& im (sts.image ());
    if (init (im, obj, statement_update))
      im.version++;

    bool u (false);
    binding& imb (sts.update_image_binding ());
    if (im.version != sts.update_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_update);
      sts.update_image_version (im.version);
      imb.version++;
      u = true;
    }

    binding& idb (sts.id_image_binding ());
    if (idi.version != sts.update_id_image_version () ||
        idb.version == 0)
    {
      if (idi.version != sts.id_image_version () ||
          idb.version == 0)
      {
        bind (idb.bind, idi);
        sts.id_image_version (idi.version);
        idb.version++;
      }

      sts.update_id_image_version (idi.version);

      if (!u)
        imb.version++;
    }

    update_statement& st (sts.update_statement ());
    if (st.execute () == 0)
      throw object_not_persistent ();

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // timeline_items_
    //
    {
      ::std::vector< ::std::shared_ptr< ::TimelineItem > > const& v =
        obj.timeline_items_;

      timeline_items_traits::update (
        v,
        esc.timeline_items_);
    }

    callback (db, obj, callback_event::post_update);
    pointer_cache_traits::update (db, obj);
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  erase (database& db, const id_type& id)
  {
    using namespace pgsql;

    ODB_POTENTIALLY_UNUSED (db);

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    id_image_type& i (sts.id_image ());
    init (i, id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // timeline_items_
    //
    timeline_items_traits::erase (
      esc.timeline_items_);

    if (sts.erase_statement ().execute () != 1)
      throw object_not_persistent ();

    pointer_cache_traits::erase (db, id);
  }

  access::object_traits_impl< ::Timeline, id_pgsql >::pointer_type
  access::object_traits_impl< ::Timeline, id_pgsql >::
  find (database& db, const id_type& id)
  {
    using namespace pgsql;

    {
      pointer_type p (pointer_cache_traits::find (db, id));

      if (!pointer_traits::null_ptr (p))
        return p;
    }

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (l.locked ())
    {
      if (!find_ (sts, &id))
        return pointer_type ();
    }

    pointer_type p (
      access::object_factory<object_type, pointer_type>::create ());
    pointer_traits::guard pg (p);

    pointer_cache_traits::insert_guard ig (
      pointer_cache_traits::insert (db, id, p));

    object_type& obj (pointer_traits::get_ref (p));

    if (l.locked ())
    {
      select_statement& st (sts.find_statement ());
      ODB_POTENTIALLY_UNUSED (st);

      callback (db, obj, callback_event::pre_load);
      init (obj, sts.image (), &db);
      load_ (sts, obj, false);
      sts.load_delayed (0);
      l.unlock ();
      callback (db, obj, callback_event::post_load);
      pointer_cache_traits::load (ig.position ());
    }
    else
      sts.delay_load (id, obj, ig.position ());

    ig.release ();
    pg.release ();
    return p;
  }

  bool access::object_traits_impl< ::Timeline, id_pgsql >::
  find (database& db, const id_type& id, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    reference_cache_traits::position_type pos (
      reference_cache_traits::insert (db, id, obj));
    reference_cache_traits::insert_guard ig (pos);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, false);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    reference_cache_traits::load (pos);
    ig.release ();
    return true;
  }

  bool access::object_traits_impl< ::Timeline, id_pgsql >::
  reload (database& db, object_type& obj)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());
    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    statements_type::auto_lock l (sts);

    const id_type& id  (
      obj.id_);

    if (!find_ (sts, &id))
      return false;

    select_statement& st (sts.find_statement ());
    ODB_POTENTIALLY_UNUSED (st);

    callback (db, obj, callback_event::pre_load);
    init (obj, sts.image (), &db);
    load_ (sts, obj, true);
    sts.load_delayed (0);
    l.unlock ();
    callback (db, obj, callback_event::post_load);
    return true;
  }

  bool access::object_traits_impl< ::Timeline, id_pgsql >::
  find_ (statements_type& sts,
         const id_type* id)
  {
    using namespace pgsql;

    id_image_type& i (sts.id_image ());
    init (i, *id);

    binding& idb (sts.id_image_binding ());
    if (i.version != sts.id_image_version () || idb.version == 0)
    {
      bind (idb.bind, i);
      sts.id_image_version (i.version);
      idb.version++;
    }

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    select_statement& st (sts.find_statement ());

    st.execute ();
    auto_result ar (st);
    select_statement::result r (st.fetch ());

    if (r == select_statement::truncated)
    {
      if (grow (im, sts.select_image_truncated ()))
        im.version++;

      if (im.version != sts.select_image_version ())
      {
        bind (imb.bind, im, statement_select);
        sts.select_image_version (im.version);
        imb.version++;
        st.refetch ();
      }
    }

    return r != select_statement::no_data;
  }

  void access::object_traits_impl< ::Timeline, id_pgsql >::
  load_ (statements_type& sts,
         object_type& obj,
         bool reload)
  {
    ODB_POTENTIALLY_UNUSED (reload);

    extra_statement_cache_type& esc (sts.extra_statement_cache ());

    // timeline_items_
    //
    {
      ::std::vector< ::std::shared_ptr< ::TimelineItem > >& v =
        obj.timeline_items_;

      timeline_items_traits::load (
        v,
        esc.timeline_items_);
    }
  }

  result< access::object_traits_impl< ::Timeline, id_pgsql >::object_type >
  access::object_traits_impl< ::Timeline, id_pgsql >::
  query (database&, const query_base_type& q)
  {
    using namespace pgsql;
    using odb::details::shared;
    using odb::details::shared_ptr;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    statements_type& sts (
      conn.statement_cache ().find_object<object_type> ());

    image_type& im (sts.image ());
    binding& imb (sts.select_image_binding ());

    if (im.version != sts.select_image_version () ||
        imb.version == 0)
    {
      bind (imb.bind, im, statement_select);
      sts.select_image_version (im.version);
      imb.version++;
    }

    std::string text (query_statement);
    if (!q.empty ())
    {
      text += " ";
      text += q.clause ();
    }

    q.init_parameters ();
    shared_ptr<select_statement> st (
      new (shared) select_statement (
        sts.connection (),
        query_statement_name,
        text,
        false,
        true,
        q.parameter_types (),
        q.parameter_count (),
        q.parameters_binding (),
        imb));

    st->execute ();
    st->deallocate ();

    shared_ptr< odb::object_result_impl<object_type> > r (
      new (shared) pgsql::object_result_impl<object_type> (
        q, st, sts, 0));

    return result<object_type> (r);
  }

  unsigned long long access::object_traits_impl< ::Timeline, id_pgsql >::
  erase_query (database&, const query_base_type& q)
  {
    using namespace pgsql;

    pgsql::connection& conn (
      pgsql::transaction::current ().connection ());

    std::string text (erase_query_statement);
    if (!q.empty ())
    {
      text += ' ';
      text += q.clause ();
    }

    q.init_parameters ();
    delete_statement st (
      conn,
      erase_query_statement_name,
      text,
      q.parameter_types (),
      q.parameter_count (),
      q.parameters_binding ());

    return st.execute ();
  }
}

#include <odb/post.hxx>
